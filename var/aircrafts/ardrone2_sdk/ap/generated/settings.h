/* This file has been generated by gen_settings from /home/djim/Documents/paparazzi/var/aircrafts/ardrone2_sdk/settings_modules.xml /home/djim/Documents/paparazzi/conf/settings/control/rotorcraft_guidance.xml /home/djim/Documents/paparazzi/conf/settings/rotorcraft_basic.xml /home/djim/Documents/paparazzi/var/aircrafts/ardrone2_sdk/settings_telemetry.xml */
/* Please DO NOT EDIT */

#ifndef SETTINGS_H
#define SETTINGS_H

#define RCSettings(mode_changed) { \
}

#include "autopilot.h"
#include "generated/periodic_telemetry.h"
#include "guidance/guidance_h.h"
#include "guidance/guidance_v.h"
#include "navigation.h"
#include "generated/modules.h"

#define SETTINGS_NAMES { \
 { "telemetry_mode_Main" }, \
 { "autopilot_mode_auto2" }, \
 { "kill_throttle" }, \
 { "autopilot_power_switch" }, \
 { "autopilot_mode" }, \
 { "guidance_v_kp" }, \
 { "guidance_v_kd" }, \
 { "guidance_v_ki" }, \
 { "guidance_v_nominal_throttle" }, \
 { "guidance_v_adapt_throttle_enabled" }, \
 { "guidance_v_z_sp" }, \
 { "guidance_h_use_ref" }, \
 { "gh_ref.max_speed" }, \
 { "guidance_h_approx_force_by_thrust" }, \
 { "gh_ref.tau" }, \
 { "gh_ref.omega" }, \
 { "gh_ref.zeta" }, \
 { "guidance_h_pgain" }, \
 { "guidance_h_dgain" }, \
 { "guidance_h_igain" }, \
 { "guidance_h_vgain" }, \
 { "guidance_h_again" }, \
 { "guidance_h_pos_sp.x" }, \
 { "guidance_h_pos_sp.y" }, \
 { "flight_altitude" }, \
 { "nav_heading" }, \
 { "nav_radius" }, \
};
#define SETTINGS_NAMES_SHORT { \
 "tel_mod_Mai" , \
 "aut_mod_aut" , \
 "kil_thr" , \
 "aut_pow_swi" , \
 "aut_mod" , \
 "gui_v_kp" , \
 "gui_v_kd" , \
 "gui_v_ki" , \
 "gui_v_nom_thr" , \
 "gui_v_ada_thr_en" , \
 "gui_v_z_sp" , \
 "gui_h_use_ref" , \
 "gh_ref_max_spe" , \
 "gui_h_app_for_by" , \
 "gh_ref_tau" , \
 "gh_ref_ome" , \
 "gh_ref_zet" , \
 "gui_h_pga" , \
 "gui_h_dga" , \
 "gui_h_iga" , \
 "gui_h_vga" , \
 "gui_h_aga" , \
 "gui_h_pos_sp_x" , \
 "gui_h_pos_sp_y" , \
 "fli_alt" , \
 "nav_hea" , \
 "nav_rad" , \
};
#define NB_SETTING 27
#define DlSetting(_idx, _value) { \
  switch (_idx) { \
    case 0: telemetry_mode_Main = _value; break;\
    case 1: autopilot_mode_auto2 = _value; break;\
    case 2: autopilot_KillThrottle( _value ); _value = kill_throttle; break;\
    case 3: autopilot_SetPowerSwitch( _value ); _value = autopilot_power_switch; break;\
    case 4: autopilot_mode = _value; break;\
    case 5: guidance_v_kp = _value; break;\
    case 6: guidance_v_kd = _value; break;\
    case 7: guidance_v_SetKi( _value ); _value = guidance_v_ki; break;\
    case 8: guidance_v_nominal_throttle = _value; break;\
    case 9: guidance_v_adapt_throttle_enabled = _value; break;\
    case 10: guidance_v_z_sp = _value; break;\
    case 11: guidance_h_SetUseRef( _value ); _value = guidance_h_use_ref; break;\
    case 12: guidance_h_SetMaxSpeed( _value ); _value = gh_ref.max_speed; break;\
    case 13: guidance_h_approx_force_by_thrust = _value; break;\
    case 14: guidance_h_SetTau( _value ); _value = gh_ref.tau; break;\
    case 15: guidance_h_SetOmega( _value ); _value = gh_ref.omega; break;\
    case 16: guidance_h_SetZeta( _value ); _value = gh_ref.zeta; break;\
    case 17: guidance_h_pgain = _value; break;\
    case 18: guidance_h_dgain = _value; break;\
    case 19: guidance_h_SetKi( _value ); _value = guidance_h_igain; break;\
    case 20: guidance_h_vgain = _value; break;\
    case 21: guidance_h_again = _value; break;\
    case 22: guidance_h_pos_sp.x = _value; break;\
    case 23: guidance_h_pos_sp.y = _value; break;\
    case 24: navigation_SetFlightAltitude( _value ); _value = flight_altitude; break;\
    case 25: nav_heading = _value; break;\
    case 26: nav_radius = _value; break;\
    default: break;\
  }\
}
#define PeriodicSendDlValue(_trans, _dev) { \
  static uint8_t i;\
  float var;\
  if (i >= 27) i = 0;\
  switch (i) { \
    case 0: var = telemetry_mode_Main; break;\
    case 1: var = autopilot_mode_auto2; break;\
    case 2: var = kill_throttle; break;\
    case 3: var = autopilot_power_switch; break;\
    case 4: var = autopilot_mode; break;\
    case 5: var = guidance_v_kp; break;\
    case 6: var = guidance_v_kd; break;\
    case 7: var = guidance_v_ki; break;\
    case 8: var = guidance_v_nominal_throttle; break;\
    case 9: var = guidance_v_adapt_throttle_enabled; break;\
    case 10: var = guidance_v_z_sp; break;\
    case 11: var = guidance_h_use_ref; break;\
    case 12: var = gh_ref.max_speed; break;\
    case 13: var = guidance_h_approx_force_by_thrust; break;\
    case 14: var = gh_ref.tau; break;\
    case 15: var = gh_ref.omega; break;\
    case 16: var = gh_ref.zeta; break;\
    case 17: var = guidance_h_pgain; break;\
    case 18: var = guidance_h_dgain; break;\
    case 19: var = guidance_h_igain; break;\
    case 20: var = guidance_h_vgain; break;\
    case 21: var = guidance_h_again; break;\
    case 22: var = guidance_h_pos_sp.x; break;\
    case 23: var = guidance_h_pos_sp.y; break;\
    case 24: var = flight_altitude; break;\
    case 25: var = nav_heading; break;\
    case 26: var = nav_radius; break;\
    default: var = 0.; break;\
  }\
  pprz_msg_send_DL_VALUE(_trans, _dev, AC_ID, &i, &var);\
  i++;\
}
static inline float settings_get_value(uint8_t i) {
  switch (i) { \
    case 0: return telemetry_mode_Main;
    case 1: return autopilot_mode_auto2;
    case 2: return kill_throttle;
    case 3: return autopilot_power_switch;
    case 4: return autopilot_mode;
    case 5: return guidance_v_kp;
    case 6: return guidance_v_kd;
    case 7: return guidance_v_ki;
    case 8: return guidance_v_nominal_throttle;
    case 9: return guidance_v_adapt_throttle_enabled;
    case 10: return guidance_v_z_sp;
    case 11: return guidance_h_use_ref;
    case 12: return gh_ref.max_speed;
    case 13: return guidance_h_approx_force_by_thrust;
    case 14: return gh_ref.tau;
    case 15: return gh_ref.omega;
    case 16: return gh_ref.zeta;
    case 17: return guidance_h_pgain;
    case 18: return guidance_h_dgain;
    case 19: return guidance_h_igain;
    case 20: return guidance_h_vgain;
    case 21: return guidance_h_again;
    case 22: return guidance_h_pos_sp.x;
    case 23: return guidance_h_pos_sp.y;
    case 24: return flight_altitude;
    case 25: return nav_heading;
    case 26: return nav_radius;
    default: return 0.;
    }
  }

/* Persistent Settings */
struct PersistentSettings {
};

extern struct PersistentSettings pers_settings;

static inline void persistent_settings_store( void ) {
}

static inline void persistent_settings_load( void ) {
}

#endif // SETTINGS_H
